[auth]
	# This is for the links a the bottom of login/join auth pages.
	or = "or"
	join_link = "Зарегистрироваться!"
	login_link = "Войти"
	forgot_link = "Забыл имя или пароль"

# /login
[auth.login]
	page_title = "Войти в Game Jolt"

	twitter_button = "Войти через Twitter"
	facebook_button = "Войти через Facebook"

	username_label = "Имя пользователя"
	password_label = "Пароль"
	submit_button = "Войти"

	# Shows up if you enter an invalid user/password combination.
	invalid_login_error_html = "Неправильное имя пользователя или пароль."

	# Login takes a while, so we show this for the loading text.
	# Can be quirky and fun! =]
	loading_message_count = "4"
	loading_message_1 = "Подключаемся к мэинфрейму..."
	loading_message_2 = "Вычисляем число π..."
	loading_message_3 = "Развёртываем модули развлечений..."
	loading_message_4 = "Проецируем матрицу шумихи..."

# /join
[auth.join]
	page_title = "Join Game Jolt - The Largest Collection of Indie Games by People"

	twitter_button = "Войти через Twitter"
	facebook_button = "Войти через Facebook"

	# The lead text of the page.
	# Quirky and fun as it's the text to get them excited about signing up.
	# Let's try to keep it at 3 lines or less on the page.
	join_message_html_count = "2"
	join_message_html_1 = "Присоединяйтесь. Муахаха. <br>У нас есть игры. <br><strong><em>Муахахахаха!</em></strong>"
	join_message_html_2 = "Присоединяйтесь к нашей космической ракете чтобы исследовать суперновую звезду геймдева."

	email_label = "Адресс эллектронной почты"
	username_label = "Имя пользователя"
	password_label = "Пароль"

	submit_button = "Зарегистрироваться"

# /join/almost
# After a successful sign up they land here.
# They still have to authorize their account.
[auth.join.almost]
	page_title = "Почти готово!"
	heading = "@:auth.join.almost.page_title"
	body_html = """
	<p>Перед тем как войти в аккаунт Game Jolt.</p>
	<p>Мы отправили вам инструкцию по активации.</p>
	"""
	spam = "Если вы не увидите сообщение через 10 минут, проверьте папку со спамом. Возможно оно находится там!"
	urgency = "Помните, что на подтверждение даётся неделя. После этого ваш аккаунт будет удалён и вам придётся регистрироваться заново."

# You need to actually sign up to get a valid URL for this page.
# We only show a Growl on successful authorization and funnel off to the main site.
[auth.authorize]
	success_growl_title = "Аккаунт авторизован"
	success_growl = "Мы перенаправляем вас на вашу доску событий Game Jolt."

# /authorize/169219/62b17036174c87ee503fe0ef2902c79d/2
# The page that shows when their authorization fails.
# They shouldn't get here unless they clicked the link again after authorizing. Or if they are trying to cheat something.
[auth.authorize.invalid]
	page_title = "Неправильный код авторизации"
	heading = "Авторизация невозможна"
	body_html = """
	<p>Ваш активационный код неверен.</p>
	<p>Пожаллуйста, удостоверьтесь что вы скопировали URL из нашего сообщения правильно.</p>
	"""

# /forgot
[auth.forgot]
	page_title = "Отправка данных профиля"
	heading = "@:auth.forgot.page_title"

	email_help = "Введите вашу электронную почту и мы вам отправим ваши настройки."
	email_label = "Адресс Email"
	submit_button = "Отправка данных профилля"

	# If the email address they enter isn't a registered user, this shows up as an error message.
	invalid_email_error_html = """
	<p>Хмм, данный Email не зарегистрирован у нас. Может быть вы ещё не <a href="/join">зарегистрировались</a>?</p>
	"""

# /forgot/sent
# For after they fill out the "forgot" form.
[auth.forgot.sent]
	page_title = "Отправка учётных данных"
	heading = "@:auth.forgot.sent.page_title"
	body_html = "<p>Мы отправили вам инструкцию по электронной почте.</p>"
	spam = "Если вы не увидите сообщение через 10 минут, проверьте папку со спамом. Возможно оно находится там!"

# The URL for this gets sent in an email when they fill out the forgot login credentials page.
[auth.reset_password]
	page_title = "Сбросить пароль"
	heading = "@:auth.reset_password.page_title"

	password_help = "Если вы хотите изменить пароль, то введите его здесь."
	password_label = "Новый пароль"
	submit_button = "Сбросить пароль"

	# For when they successfully reset.
	# Will send them back to the login page after showing this Growl.
	success_growl_title = "Пароль изменён"
	success_growl = "Ваш пароль сброшен. Теперь вы можете войти с помощью нового пароля."


#####################
# Linked Account Auth

[auth.linked_account]

	# When they get returned back to GJ from FB/Twitter, etc. we do some processing of the login/sign up.
	# This is a generic loading message while we're doing our work.
	loading_message = "Загрузка. Пожалуйста подождите..."

[auth.linked_account.facebook]

	# Generic failed message.
	failed_growl = "Невозможно войти через Facebook."
	failed_growl_title = "Авторизация провалена"

	# For the rare case when FB doesn't give us an email address. This would be very rare if it did ever happen.
	no_email_growl = "Ваш аккаунт Facebook не может передать нам ваш Email. Проверьте Email у вашего аккаунта Facebook."
	no_email_growl_title = "О нет!"

	# When someone tries to sign up with an FB account with an email address that exists on an existing GJ account.
	# In most cases this will probably be an accident where they signed up in the past
	# and then try signing up again with FB later on, but their email address is
	# registered on their old account.
	duplicate_email_growl = "Email данного профиля Facebook уже занят. Может у вас уже есть аккаунт?"
	duplicate_email_growl_title = "О нет!"

	# After a successful FB sign up.
	created_growl = "Ваш профиль создан. Теперь вы можете отправиться в плаванье!"
	created_growl_title = "Профиль создан"

[auth.linked_account.twitter]

	# Generic failed message.
	failed_growl = "Невозможно войти через Twitter."
	failed_growl_title = "Авторизация провалена"

	# When they submit the form and their account is set up with Twitter.
	created_growl = "Ваш профиль создан. Теперь вы можете отправиться в плаванье!"
	created_growl_title = "Профиль создан"

# /login/finalize-twitter
# They get directed here when they sign up with a new twitter account and we require their email address.
[auth.linked_account.twitter.finalize]
	page_title = "Введите Email"
	heading = "@:auth.linked_account.twitter.finalize.page_title"

	email_help = "Чтобы закончить регистрацию через Twitter, пожалуйста введите ваш Email."
	email_label = "Адрес Email"
	submit_button = "Завершите регистрацию"

	# If they entered an email address that exists on another account.
	# In most cases this will probably be an accident where they signed up in the past
	# and then try signing up again with twitter later on, but their email address is
	# registered on their old account.
	duplicate_email_error_html = """
	<p>Данный адрес электронной почты уже занят.</p>
	<p>Если у вас уже есть профиль Game Jolt вы можете <a href="/login">войти</a>.</p>
	<p>Если вы забыли информацию о вашем профиле <a href="/forgot">восстановите её здесь</a>.</p>
	"""
